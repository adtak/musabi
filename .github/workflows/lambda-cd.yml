name: Deploy to AWS

on:
  workflow_dispatch:
    inputs:
      functions:
        description: 'Lambda functions to deploy (comma-separated or "all")'
        required: true
        default: "all"
        type: string

env:
  AWS_REGION: ap-northeast-1

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate function names
        run: |
          if [ "${{ inputs.functions }}" != "all" ]; then
            IFS=',' read -ra func_array <<< "${{ inputs.functions }}"
            for func in "${func_array[@]}"; do
              func=$(echo "$func" | xargs)  # trim whitespace
              case "$func" in
                "gen-text"|"gen-img"|"select-img"|"edit-img"|"pub-img")
                  echo "✅ Valid function: ${func}" ;;
                *)
                  echo "❌ Invalid function name: ${func}"
                  echo "Valid functions: gen-text, gen-img, select-img, edit-img, pub-img"
                  exit 1 ;;
              esac
            done
          fi

      - name: Determine functions to deploy
        id: functions
        run: |
          if [ "${{ inputs.functions }}" = "all" ]; then
            echo "functions=gen-text,gen-img,select-img,edit-img,pub-img" >> $GITHUB_OUTPUT
          else
            echo "functions=${{ inputs.functions }}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker images
        working-directory: ./lambda
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          FUNCTIONS: ${{ steps.functions.outputs.functions }}
        run: |
          # Convert comma-separated functions to array
          IFS=',' read -ra func_array <<< "$FUNCTIONS"

          # Build and push each function
          for func in "${func_array[@]}"; do
            echo "Building and pushing ${func} ..."

            docker buildx build \
              --provenance=false \
              --build-arg "INSTALL_GROUP=${func}" \
              --target "$func" \
              -t "${REGISTRY}/musabi-${func}:latest" \
              -f docker/Dockerfile \
              --push \
              .

            echo "✅ Successfully pushed ${func} to ECR"
          done

      - name: Update Lambda functions
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          FUNCTIONS: ${{ steps.functions.outputs.functions }}
        run: |
          # Convert comma-separated functions to array
          IFS=',' read -ra func_array <<< "$FUNCTIONS"

          # Update each Lambda function
          for func in "${func_array[@]}"; do
            case "$func" in
              "gen-text")
                lambda_name="GenTextFunction" ;;
              "gen-img")
                lambda_name="GenImgFunction" ;;
              "edit-img")
                lambda_name="EditImgFunction" ;;
              "pub-img")
                lambda_name="PubImgFunction" ;;
              *)
                echo "Unknown function: ${func}"; exit 1 ;;
            esac
            echo "Updating $lambda_name with new image..."

            aws lambda update-function-code \
              --function-name "$lambda_name" \
              --image-uri "${REGISTRY}/musabi-${func}:latest" \
              --no-cli-pager

            aws lambda wait function-updated \
              --function-name "$lambda_name"

            echo "✅ Successfully updated ${lambda_name}"
          done

      - name: Deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Functions deployed: ${{ steps.functions.outputs.functions }}" >> $GITHUB_STEP_SUMMARY
          echo "- AWS Region: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- Deployment completed at: $(date)" >> $GITHUB_STEP_SUMMARY
